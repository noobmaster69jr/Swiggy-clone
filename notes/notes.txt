Is jsx mandatory for react?
	JSX is not a requirement for using React. Using React without JSX is especially convenient when you don't want to set up compilation in your build environment. Each JSX element is just syntactic sugar for calling React.

Is ES6 mandatory for React?
	No it is not, but is highly recommmendable as many latest project created on react rely a lot on ES6

How can I write comments in JSX?
	we can use write comments inside of {}, as react reads curly braces as javascript

What is React Fragment? ​
	 React Fragment is a feature in React that allows you to return multiple elements from a React component by allowing you to group a list of children without adding extra nodes to the DOM. 
	 <></> shorthand  for writing React.Fragment

what is virtual DOM?
	The virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation of a UI is kept in memory and synced with the “real” DOM by a library such as ReactDOM. This process is called reconciliation.

what is Reconciliation?
	 https://reactjs.org/docs/reconciliation.html

what is React Fiber?
	
Why we need keys in React? When do we need keys in React?
	A “key” is a special string attribute you need to include when creating lists of elements in React.
 Keys are used in React to identify which items in the list are changed, updated, or deleted.
 In other words, we can say that keys are used to give an identity to the elements in the lists

Can we use index as keys in React?
	We don't recommend using indexes for keys if the order of items may change.
 This can negatively impact performance and may cause issues with component state.

Config driven UI
	 CDD is a way of using modularity to build a loosely coupled set of components that are then composed together using a common interface.

*Every component in react has some state, every time we want to use some local variable in react 
we use state

*Hook is just a normal function
*useState() to create local state variable

const [varName, setvarName] = useState("defaultValue");
using setvarName we can change value of varName

when we want to keep variable in sync with the ui we use state variable, it will automatically
rerender

Config.js allows developers to configure their applications in an XML block instead of hard-coding values inside their scripts or in JSON objects. 
 The XML can be embedded inside an HTML document or in a separate XML file. 
 The configuration block may contain strings, numbers, arrays and HTML.

 whenever the state variable is changed the whole component is rerendered

 in react we load -> render -> call api -> update ui [useEffect hook is used for this]

 useEffect(callback, dependencies array) 
 useEffect(()=>{

 }, []) - callback is dependent on the dependencies array, and runs once initially and runs
  only if it changes
 if the dependencies array is empty it will be called only once
 if we don't pass anything after callback useEffect will be called after every render

 conditional rendering:
 if restaurant is empty load - shimmer ui
 else load - actual ui


 diff algorithm is the core of react

 react says that never create a component inside a component
 never write a useState insde a if, else or for it leads to inconsistencies

 always create state variables inside function component

 use "formik" package to create form

 import {createBrowserRouter, RouterProvider, Outlet } from "react-router-dom" -> helps us create a router

 SPA - single page application
 2 types of routing :
 		 1.server side routing - all our pages comes from server
		 2.client side routing - we are only loading another component, not making network call

to use anchor element inside react we use "Link"

children are render inside outlet, outlet is created inside parent component
all the children will go inside the Outlet according to the route

class based components: 

class Profile extends React.Component{
	constructor(props){
		super(props)
		this.state={
			count: 0,
			count2: 7,

			//class component uses one State object to maintain
			//all state variables inside it
		//in function components we make separate state variables
		}
	}
	//constructor is called first then render
	componentDidMount(){  //life cycle method
		//this function is called after render, can be used same as useEffect()
	}
	render(){
		return ()
	}
	//we cannot create class components without render method
	//it is the only way to create class components and returns jsx
}  


react render happens in 2 phase:
		render phase (constructor, render)
		commit phase(componentDidMount)

we can make componentDidMount async but not callback of useEffect as async

componentDidMount is called after first render and 
componentDidUpdate is called after every update render 
componentWillUnmount is called when the component is about to be removed from Dom
interval which is set in componentDidMount can be cleared in componentWillUnmount
similarly we can use a return inside useEffect to clear the interval

componentDidMount(){
	const this.timer =setInterval(()=>{}, 1000)
	//everytime componentDidMount is called it creates a new interval
}
componentWillUnmount(){
	clearInterval(this.timer)
	//this is shared between all methods in the component
}

useEffect({
	const timer =setInterval(()=>{}, 1000)
	return ()=>{
		clearInterval(timer)
	}
},[])

React lifecycle methods diagram

we can have different bundles in different chunks, like when we need to load something only on demand
lazy loading help us to do this, it makes to code to load slowly and react cannot find the code in time
and it stops re-rendering.

lazy loading :
 const instagram = lazy(()=> import("./instagram"))

we can use "suspense" to wrap the lazy loading component so that react handles it differently
and also we can use a attribute "fallback" to load something meanwhile(like shimmer)

Never ever try to dynamically load your code inside a component

createContext stores data in a central space which can be used throughout the application

we do not have useContext in class components so we use
 <importedContext.Consumer>
      {(value)=> valueSomething}
</importedContext.Consumer>

we can modify context in class based components by 
<importedContext.Provider value={}>
</importedContext.Provider>

we use context to avoid props drilling

redux is used for data management

cons of redux:
	huge learning curve, installation is very difficult

using Provider component we give store to our app




